{"noir_version":"0.36.0+801c71880ecf8386a26737a5d8bb5b4cb164b2ab","hash":4035536700835947214,"abi":{"parameters":[{"name":"target_word","type":{"kind":"string","length":5},"visibility":"private"},{"name":"guess","type":{"kind":"string","length":5},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":5,"type":{"kind":"struct","path":"LetterStatus","fields":[{"name":"is_correct","type":{"kind":"boolean"}},{"name":"is_present","type":{"kind":"boolean"}}]}},"visibility":"public"},"error_types":{}},"bytecode":"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","debug_symbols":"ndrNahphGEfxe5m1C88z76e3UkrQRMOAaFBTKJJ7r22zCKWb9+wch7+b57c6eJ9e9rv316fldDhfp823+3Q8P29vy/n0eLpPrP98d33bnn4/Xm/by23atNJW0/708vjU08dqOizH/bSp64/vqwmGFzG8mIcXaXiRhxdleFGHF2140UcXMXzzGL55DN88hm8ewzeP4ZvH8M1j+OYxfPMYvvn835sz5/I5YW7x7waxCbGZxSaJTRabIjZVbJrY9PFNEg6ScJCEgyQcJOEgCQdJOEjCQRIOknCQhYMsHGThIAsHWTjIwkEWDrJwkIWDLBwU4aAIB0U4KMJBEQ6KcFCEgyIcFOGgCAdVOKjCQRUOqnBQhYMqHFThoAoHVTiowkETDppw0ISDJhw04aAJB004aMJBEw6acNCFgy4cdOGgCwddOOjCQRcOunDQhYMuHLBemxFmFGY0m1Eyo2xGxYyqGTUzMiIwIjAiMCIwIjAiMCIwIjAiMCIwIsKICCMijIgwIsKICCMijIgwIsKICCPC5EZMb8QER0xxxCRHTHPEREdMdcRkR0x3xIRHTHnEpEdMe8TER0x9xORHTH/EBEhMgcQkSEyDxERITIXEZEhMh8SESEyJxKRITIvExEhMjcTkSEyPxARJTJHEJElMk8RESUyVxGRJTJfEhElMmcSkSUybxMRJTJ3E5ElMn8QESkyhxCRKTKPEREpMpcRkSkynxIRKTKnEpEpMq8TESkytxORKTK/EBEtMscQkS0yzDNMswzTLMM0yTLMM0yzDNMswzTJMswzTLGO8WT4edpfleFxen77+9/Hx9Y/tZdnujvvPx8P76fnL29vPt79vHj/xCw==","file_map":{"70":{"source":"// Constants for the game\r\nglobal WORD_LENGTH = 5;\r\n\r\nstruct LetterStatus {\r\n    is_correct: bool,\r\n    is_present: bool,\r\n}\r\n\r\n// Main Noirdle circuit to verify a valid guess\r\nfn main(target_word: str<WORD_LENGTH>, guess: str<WORD_LENGTH>) -> pub [LetterStatus; WORD_LENGTH] {\r\n    // Shadowing target_word and guess\r\n    let target_word = target_word.as_bytes();\r\n    let guess = guess.as_bytes();\r\n\r\n    // Assert that the guess and target words are the proper length\r\n    assert(target_word.len() == WORD_LENGTH);\r\n    assert(guess.len() == WORD_LENGTH);\r\n\r\n    // Convert letter statuses to verifiable results\r\n    let mut letter_statuses: [LetterStatus; WORD_LENGTH] =\r\n        [LetterStatus { is_correct: false, is_present: false }; WORD_LENGTH];\r\n\r\n    // First pass: mark exact matches\r\n    for i in 0..WORD_LENGTH {\r\n        letter_statuses[i].is_correct = (target_word[i] == guess[i]);\r\n    }\r\n\r\n    // Second pass: mark present letters\r\n    for i in 0..WORD_LENGTH {\r\n        // If the letter is not already marked as correct\r\n        if !letter_statuses[i].is_correct {\r\n            // Check if the letter is present in the target word\r\n            for j in 0..WORD_LENGTH {\r\n                // Ensure current index is not equal to target index\r\n                if i != j {\r\n                    // If the letters match\r\n                    if target_word[j] == guess[i] {\r\n                        letter_statuses[i].is_present = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    letter_statuses\r\n}\r\n\r\n#[test]\r\nfn test_passing_same_word() {\r\n    let target_word = \"APPLE\";\r\n    let guess = \"APPLE\";\r\n    let letter_statuses = main(target_word, guess);\r\n\r\n    assert(letter_statuses[0].is_correct);\r\n    assert(letter_statuses[1].is_correct);\r\n    assert(letter_statuses[2].is_correct);\r\n    assert(letter_statuses[3].is_correct);\r\n    assert(letter_statuses[4].is_correct);\r\n\r\n    assert(!letter_statuses[0].is_present);\r\n    assert(!letter_statuses[1].is_present);\r\n    assert(!letter_statuses[2].is_present);\r\n    assert(!letter_statuses[3].is_present);\r\n    assert(!letter_statuses[4].is_present);\r\n}\r\n\r\n#[test]\r\nfn test_passing_different_word() {\r\n    let target_word = \"APPLE\";\r\n    let guess = \"MANGO\";\r\n    let letter_statuses = main(target_word, guess);\r\n\r\n    assert(!letter_statuses[0].is_correct);\r\n    assert(!letter_statuses[1].is_correct);\r\n    assert(!letter_statuses[2].is_correct);\r\n    assert(!letter_statuses[3].is_correct);\r\n    assert(!letter_statuses[4].is_correct);\r\n\r\n    assert(!letter_statuses[0].is_present);\r\n    assert(letter_statuses[1].is_present);\r\n    assert(!letter_statuses[2].is_present);\r\n    assert(!letter_statuses[3].is_present);\r\n    assert(!letter_statuses[4].is_present);\r\n}\r\n\r\n#[test(should_fail)]\r\nfn test_failing_different_word() {\r\n    let target_word = \"APPLE\";\r\n    let guess = \"GUAVA\";\r\n    let letter_statuses = main(target_word, guess);\r\n\r\n    assert(!letter_statuses[0].is_correct);\r\n    assert(!letter_statuses[1].is_correct);\r\n    assert(!letter_statuses[2].is_correct);\r\n    assert(!letter_statuses[3].is_correct);\r\n    assert(!letter_statuses[4].is_correct);\r\n\r\n    assert(!letter_statuses[0].is_present);\r\n    assert(!letter_statuses[1].is_present);\r\n    assert(!letter_statuses[2].is_present);\r\n    assert(!letter_statuses[3].is_present);\r\n    assert(!letter_statuses[4].is_present);\r\n}\r\n\r\n","path":"/mnt/d/GIT/noirdle/circuit/src/main.nr"}},"names":["main"],"brillig_names":["directive_invert"]}